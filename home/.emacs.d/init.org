* Introduction
There is a stub [[file:~/.emacs][.emacs file]] which uses org-babel to load this file.

Inspiration from the approach at [[https://github.com/dbr/dotemacs][dbr/dotemacs]] as found in a [[http://www.reddit.com/r/emacs/comments/12pgtg/restarting_from_scratch/][reddit thread]].

* El-Get Mode
** Bootstrap
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/el-get/el-get")
  
  (unless (require 'el-get nil t)
    (url-retrieve
     "https://raw.github.com/dimitri/el-get/master/el-get-install.el"
     (lambda (s)
       (let (el-get-master-branch)
         (goto-char (point-max))
         (eval-print-last-sexp)))))
#+end_src
** Custom package sources
#+begin_src emacs-lisp :noweb yes
(setq el-get-sources '(
      <<my-pkg>>
      ))
#+end_src
*** Region Bindings Mode
#+begin_src emacs-lisp :noweb-ref my-pkg :exports none :tangle no
  (:name region-bindings-mode
         :type github
         :pkgname "fgallina/region-bindings-mode"
         :features region-bindings-mode
         :after (progn (region-bindings-mode-enable)))
#+end_src
*** Flymake Shell
#+begin_src emacs-lisp :noweb-ref my-pkg :exports none :tangle no
  (:name flymake-shell
         :type github
         :pkgname "purcell/flymake-shell")
#+end_src
*** Eshell Manual
#+begin_src emacs-lisp :noweb-ref my-pkg :exports none :tangle no
  (:name eshell-manual
         :description "eshell is great but lacks a good manual, someone wrote one."
         :type github
         :pkgname "nicferrier/eshell-manual"
         :build (("make" "eshell.info"))
         :compile nil
         :info "eshell.info")
#+end_src
*** Folding
#+begin_src emacs-lisp :noweb-ref my-pkg :exports none :tangle no
  (:name folding 
         :post-init (folding-mode-add-find-file-hook))
#+end_src
*** Fold DWIM
#+begin_src emacs-lisp :noweb-ref my-pkg :exports none :tangle no
  (:name fold-dwim
         :type http
         :url "http://www.dur.ac.uk/p.j.heslin/Software/Emacs/Download/fold-dwim.el"
         :features fold-dwim)
#+end_src
*** Fold DWIM Org-mode style bindings
#+begin_src emacs-lisp :noweb-ref my-pkg :exports none :tangle no
  (:name fold-dwim-org
         :type emacswiki
         :features fold-dwim-org
         :depends fold-dwim
         :after (add-hook 'folding-mode-hook 'fold-dwim-org/minor-mode))
#+end_src
*** Elisp Slime style navigation
#+begin_src emacs-lisp :noweb-ref my-pkg :exports none :tangle no
  (:name elisp-slime-nav
         :type github
         :pkgname "purcell/elisp-slime-nav")
#+end_src
*** Pretty org-mode bullets
#+begin_src emacs-lisp :noweb-ref my-pkg :exports none :tangle no
  (:name org-bullets
         :type github
         :pkgname "sabof/org-bullets"
         :features org-bullets
         :after (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

*** dash
    modern list library
#+begin_src emacs-lisp :noweb-ref my-pkg :exports none :tangle no
  (:name dash
         :type github
         :pkgname "magnars/dash.el")
#+end_src
*** smartparens
    modern lightweight smart parens/auto-insert/wrapping package for Emacs
#+begin_src emacs-lisp :noweb-ref my-pkg :exports none :tangle no
  (:name smartparens
         :type github
         :pkgname "Fuco1/smartparens"
         :depends dash
         :feature smartparens
         :after)
#+end_src** Provided packages
#+begin_src emacs-lisp
  (setq my-packages '(
                      ;; PKG management
                      el-get
                      ;; Color
                      color-theme-solarized
                      ;; Interface
                      ido-ubiquitous
                      dired+
                      ;;evil
                      ace-jump-mode
                      auto-complete
                      expand-region
                      multiple-cursors
                      ;; Sunrise commander
                      sunrise-commander
                      sunrise-x-mirror
                      sunrise-x-loop
                      sunrise-x-modeline
                      ;; Programming
                      lua-mode
                      flymake-cursor
                      yasnippet
                      paredit
                      zencoding-mode
                      js3-mode
                      ;; VCS
                      magit
                      magithub
                      ;; Other
                      org-mode
                      ))
#+end_src
** Sync
#+begin_src emacs-lisp
  (el-get 'sync (append
                 my-packages
                 (mapcar 'el-get-source-name el-get-sources)))
#+end_src

* Behavior Tweaks
** Server mode
#+begin_src emacs-lisp
(server-start)
#+end_src
** Chdir to ~ 
Depending on how the emacs daemon is started, the current directory is less than ideal.

#+begin_src emacs-lisp
  (cd (expand-file-name "~/"))
#+end_src

** Disable backups
#+begin_src emacs-lisp
  (setq backup-inhibited t)
  (setq auto-save-default nil)
#+end_src
** Speed Tweaks
#+begin_src emacs-lisp
(setq font-lock-verbose nil)
(setq vc-handled-backends '(Git))
(setq jit-lock-defer-time 0.05)
#+end_src
** Modern Sentences
#+begin_src emacs-lisp
(setq sentence-end-double-space nil)
#+end_src
* Interface
** Font
The same font can have different names on each platform.
#+begin_src emacs-lisp
(defun my-font ()  
  (case window-system
    ('ns (set-frame-font "Source Code Pro 18"))))
(my-font)
#+end_src

** Minimal Window Decor
#+begin_src emacs-lisp
(setq inhibit-splash-screen t)
(menu-bar-mode 0)
(tool-bar-mode 0)
(scroll-bar-mode 0)
#+end_src

** Color scheme
This lets you swap dark and light color schemes by setting an
environment variable.

Not particularly useful on the Mac.

#+begin_src emacs-lisp
(defun my-theme () 
  (if (equalp (getenv "SCHEME") "light")
      (color-theme-solarized-light)
    (color-theme-solarized-dark)))

(defun my-frame-hook (frame)  
    (set-variable 'color-theme-is-global nil)
    (select-frame frame)
    (if window-system
    	(progn (my-theme) (my-font))
        (color-theme-tty-dark)))
(add-hook 'after-make-frame-functions 'my-frame-hook)

(set-variable 'color-theme-is-global nil)
(if window-system (my-theme))
#+end_src
** Don't bother me as much
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
** Mac specific
#+begin_src emacs-lisp
(set-default 'ns-command-modifier 'meta)
#+end_src
* Custom Functionality
** Jump to .emacs
#+begin_src emacs-lisp
;; Jump to .emacs
(defun my-edit-dot-emacs ()
  (interactive)
  (find-file "~/.emacs.d/init.org"))
(global-set-key (kbd "C-c e") 'my-edit-dot-emacs)
#+end_src

* Module Configuration
** Tramp
Fix too long TMPDIR:
#+begin_src emacs-lisp
(setenv "TMPDIR" "/tmp")
#+end_src

Default method:
#+begin_src emacs-lisp
  ;;(setq tramp-default-method "ssh")
#+end_src

** IDO Everywhere
#+begin_src emacs-lisp
(ido-mode t)
(ido-ubiquitous-mode)
#+end_src

** Ibuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (autoload 'ibuffer "ibuffer" "List buffers." t)
  (eval-after-load 'ibuffer
    '(progn
       (add-hook 'ibuffer-mode-hook
                 (lambda () (ibuffer-auto-mode 1)))
       (setq ibuffer-show-empty-filter-groups nil
             ibuffer-expert t)
       (setq ibuffer-saved-filter-groups
             `(("default"
                ("wanderlust" (or (mode . wl-draft-mode)
                                  (mode . wl-folder-mode)
                                  (mode . wl-summary-mode)))
                ("magit" (name . "^\\*magit"))
                ("@workplace@" (filename . "^~/@workplace@"))
                ("dired" (mode . dired-mode))
                ("elisp" (mode . emacs-lisp-mode))
                ("org" (or (mode . org-mode)
                           (name . "^\\*Agenda")
                           (name . "Agenda\\*$")))
                ("special" (name . "^\\*")))))
       (defun my-ibuffer-groups ()
         (ibuffer-switch-to-saved-filter-groups "default"))
       (add-hook 'ibuffer-mode-hook 'my-ibuffer-groups)))
#+end_src
** Window Management
#+begin_src emacs-lisp
(when (fboundp 'winner-mode)
  (winner-mode 1)
  (global-set-key (kbd "<mouse-8>") 'winner-undo)
  (global-set-key (kbd "<mouse-9>") 'winner-redo))
#+end_src
** Cua Selection mode, but no C-x or C-c
#+begin_src emacs-lisp
(cua-selection-mode t)
#+end_src
** Expand Region
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'er/expand-region)
#+end_src
** Multiple Cursors
#+begin_src emacs-lisp
(global-set-key (kbd "C-c C-SPC") 'mc/edit-lines)
(global-set-key (kbd "C-c C-e") 'mc/edit-ends-of-lines)
(global-set-key (kbd "C-c C-a") 'mc/edit-beginnings-of-lines)
#+end_src
*** Rectangular region mode
#+begin_src emacs-lisp
(global-set-key (kbd "C-c RET") 'set-rectangular-region-anchor)
#+end_src
*** Mark More like this
These are available with an active region.
#+begin_src emacs-lisp
(define-key region-bindings-mode-map "a" 'mc/mark-all-like-this)
(define-key region-bindings-mode-map "p" 'mc/mark-previous-like-this)
(define-key region-bindings-mode-map "n" 'mc/mark-next-like-this)
(define-key region-bindings-mode-map "m" 'mc/mark-more-like-this-extended)
#+end_src

** Ace Jump Mode
#+begin_src emacs-lisp
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
#+end_src

** Sunrise Commander
*** Bindings
#+begin_src emacs-lisp
  ;; F11 for sunrise commander
  (global-unset-key (kbd "<f11>"))
  (global-set-key (kbd "<f11>") 'sunrise)
  ;; Safe alternative
  (global-set-key (kbd "C-c s") 'sunrise)
#+end_src
** Magit
*** Bindings
#+begin_src emacs-lisp
;; F12 for magit
(global-unset-key (kbd "<f12>"))
(global-set-key (kbd "<f12>") 'magit-status)
;; Safe alternative
(global-set-key (kbd "C-c g") 'magit-status)
#+end_src


 



** Battery life in mode line
#+begin_src emacs-lisp
(setq battery-mode-line-format "[%b%p%% %t]")
(display-battery-mode)
#+end_src

* Programming modes
** Lisps
*** Paredit
#+begin_src emacs-lisp
;; Paredit
(mapc (lambda (mode)
	(let ((hook (intern (concat (symbol-name mode)
				    "-mode-hook"))))
	  (add-hook hook (lambda () (paredit-mode +1)))))
      '(emacs-lisp lisp inferior-lisp))
#+end_src
*** Elisp slime nav
Adds M-* and M-, to elisp buffers.
#+begin_src emacs-lisp
(add-hook 'emacs-lisp-mode-hook (lambda () (elisp-slime-nav-mode t)))
#+end_src
** Projectile
Possible fit for project management.
#+begin_src emacs-lisp
;(setq projectile-enable-caching t)
;(projectile-global-mode)
#+end_src
** Flymake
#+begin_src emacs-lisp
(require 'flymake-cursor)
#+end_src
** Tags
#+begin_src emacs-lisp
(setq tags-revert-without-query t)
#+end_src
** Yasnippet
#+begin_src emacs-lisp
(yas-global-mode 1)
(yas-load-directory "~/.emacs.d/snippets" t)
#+end_src
*** Fold-Dwim-Org compatibility shim
#+begin_src emacs-lisp
(defalias 'yas/snippets-at-point 'yas--snippets-at-point) ;; fold-dwim-org compatibility
(setq fold-dwim-org/trigger-keys-block (list [tab] [lefttab] [(control tab)]))
#+end_src
** smartparens
#+begin_src emacs-lisp
  (smartparens-global-mode t)

  ;;; key binds
  (define-key sp-keymap (kbd "C-M-f") 'sp-forward-sexp)
  (define-key sp-keymap (kbd "C-M-b") 'sp-backward-sexp)
  (define-key sp-keymap (kbd "C-M-d") 'sp-down-sexp)
  (define-key sp-keymap (kbd "C-M-a") 'sp-backward-down-sexp)
  (define-key sp-keymap (kbd "C-M-e") 'sp-up-sexp)
  (define-key sp-keymap (kbd "C-M-u") 'sp-backward-up-sexp)
  (define-key sp-keymap (kbd "C-M-n") 'sp-next-sexp)
  (define-key sp-keymap (kbd "C-M-p") 'sp-previous-sexp)
  (define-key sp-keymap (kbd "C-M-k") 'sp-kill-sexp)
  (sp-add-ban-insert-pair-in-string "'")

#+end_src

* Org-mode Setup
** Require
#+begin_src emacs-lisp
(require 'org)
(require 'org-protocol)
#+end_src
** Configure
#+begin_src emacs-lisp
  (setq org-hide-leading-stars t
        org-completion-use-ido t
        org-outline-path-complete-in-steps nil
        org-enforce-todo-checkbox-dependencies t
        org-enforce-todo-dependencies t
        org-special-ctrl-a/e t
        org-special-ctrl-k t
        org-yank-adjusted-subtrees t
        org-startup-indented t
        org-use-fast-todo-selection t
        org-directory "~/org"
        org-default-notes-file (concat org-directory "/notes.org")
        org-mobile-directory "~/Dropbox/mobileorg"
        org-mobile-creating-agendas t
  
        org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)" "STARTED(s)" "|" "DONE(d!/!)")
          (sequence "WAITING(w@/!)" "SOMEDAY(S!)" "|" "CANCELLED(c@/!)"))
  
  
        org-capture-templates
        '(("e" "Capture email" entry (file "inbox.org")
           "* %^{Title}\nSource: %a\n%i")
          ("t" "todo" entry (file "inbox.org")
           "* TODO %?\n%U\n%a\n  %i" :clock-in t :clock-resume t)
          ("T" "todo, sourceless" entry (file "inbox.org")
           "* TODO %?\n%U\n  %i" :clock-in t :clock-resume t)
          ("h" "Habit" entry (file "inbox.org")
           "* NEXT %?\n%U\n%a\nSCHEDULED: %t .+1d/3d\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n  %i")
          ("w" "org-protocol" entry (file "inbox.org")
           "* TODO Review %c\n%U\n  %i" :immediate-finish t))
  
        org-refile-targets '((nil :maxlevel . 9)
                             (org-agenda-files :maxlevel . 9))
        org-refile-use-outline-path t
        org-refile-allow-creating-parent-nodes (quote confirm)
  
        ;; For better sunset calc
        calendar-latitude 37.662 
        calendar-longitude -121.874
        calendar-location-name "Pleasanton, CA"
        org-mobile-files-exclude-regexp "calendar")
#+end_src


 

** Bindings
*** Capture
#+begin_src emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
#+end_src
*** Fast Nav
#+begin_src emacs-lisp
  ;; From http://orgmode.org/worg/org-hacks.html
  (defun ded/org-show-next-heading-tidily ()
    "Show next entry, keeping other entries closed."
    (if (save-excursion (end-of-line) (outline-invisible-p))
        (progn (org-show-entry) (show-children))
      (outline-next-heading)
      (unless (and (bolp) (org-on-heading-p))
        (org-up-heading-safe)
        (hide-subtree)
        (error "Boundary reached"))
      (org-overview)
      (org-reveal t)
      (org-show-entry)
      (show-children)))
  
  (defun ded/org-show-previous-heading-tidily ()
    "Show previous entry, keeping other entries closed."
    (let ((pos (point)))
      (outline-previous-heading)
      (unless (and (< (point) pos) (bolp) (org-on-heading-p))
        (goto-char pos)
        (hide-subtree)
        (error "Boundary reached"))
      (org-overview)
      (org-reveal t)
      (org-show-entry)
      (show-children)))
  
  (setq org-use-speed-commands t)
  (setq org-speed-commands-user
        '(("n" . ded/org-show-next-heading-tidily)
          ("p" . ded/org-show-previous-heading-tidily)
          ("J" . org-clock-goto)))
#+end_src
** Org Links
#+begin_src emacs-lisp
  (setq org-link-abbrev-alist
         '(("jira" . "https://jira.@workplace@.com/browse/")
           ("review" . "https://crucible.@workplace@.com/cru/")
          ))
#+end_src

*** Defunct
#+begin_src emacs-lisp
  ;; (setq org-link-abbrev-alist
  ;;        '(("jira" . "https://jira.@workplace@.com/browse/")
  ;;      ;;("devdrop" . "https://env.@xyzzy@.com:9030/oms/fx/search.flex?q=%s")
  ;;      ;;("work" . "http://localhost:4444/work/fx/search.flex?q=%s")
  ;;      ;;("work" . "https://dev.@xyzzy@.com/work/fx/search.flex?q=%s")
  ;;      ;;("work" . "https://dev.@xyzzy@.com/oms/fx/search.flex?q=%s")
  ;;      ))
  
  ;;  (defun my-org-make-ids-links ()
  ;;    (interactive)
  ;;    (save-excursion
  ;;      (query-replace-regexp " \\([0-9]+[$.][0-9]+\\)" " [[devdrop:\\1][\\1]]")))
#+end_src
** Org-mobile
*** Schedule
#+begin_src emacs-lisp
(defun my-org-mobile-pull/push ()
  (interactive)
  (org-mobile-pull)
  (org-mobile-push))

;; Every 15 minutes.
(run-at-time t 900 'my-org-mobile-pull/push)
#+end_src
** Agenda commands
#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      '(("o" "Overview"
	 ((tags-todo "+home")
	  (tags-todo "+work")
	  (tags-todo "-home-work")
	  (agenda ""))
	 ((org-agenda-ndays 1)))
	("h" tags-todo "+home")
	("w" tags-todo "+work")))
#+end_src
** Org-Velocity
#+begin_src emacs-lisp
(require 'org-velocity)
(global-set-key (kbd "C-c v") 'org-velocity-read)
(setq org-velocity-bucket "~/org/velocity.org")
#+end_src
** Org and YAS (Defunct)
#+begin_src emacs-lisp :tangle no
(defun yas/org-very-safe-expand ()
  (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

(add-hook 'org-mode-hook
	  (lambda ()
	    (make-variable-buffer-local 'yas/trigger-key)
	    (setq yas/trigger-key [tab])
	    (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
	    (define-key yas/keymap [tab] 'yas/next-field)))
#+end_src

** Org Mode notifications
#+begin_src emacs-lisp
(require 'appt)
(setq appt-message-warning-time 15
      appt-display-mode-line t
      appt-display-format 'window)
(appt-activate 1)
(display-time)

(org-agenda-to-appt t)
(add-hook 'org-finalize-agenda-hook 'org-agenda-to-appt)
#+end_src

** Stay on task (Idle display of Agenda)
#+begin_src emacs-lisp
  ;; From http://article.gmane.org/gmane.emacs.orgmode/23047
  (defun jump-to-org-agenda ()
    (interactive)
    (let ((buf (get-buffer "*Org Agenda*"))
          wind)
      (if buf
          (if (setq wind (get-buffer-window buf))
              (select-window wind)
            (if (called-interactively-p)
                (progn
                  (select-window (display-buffer buf t t))
                  (org-fit-window-to-buffer)
                  ;; (org-agenda-redo)
                  )
              (with-selected-window (display-buffer buf)
                (org-fit-window-to-buffer)
                ;; (org-agenda-redo)
                )))
        (call-interactively 'org-agenda-list)))
    ;;(let ((buf (get-buffer "*Calendar*")))
    ;;  (unless (get-buffer-window buf)
    ;;    (org-agenda-goto-calendar)))
    )
  (let ((timer (timer-create)))
    (timer-set-function timer 'jump-to-org-agenda)
    (timer-set-idle-time timer 300 t)
    (timer-activate-when-idle timer nil))
  ;;(run-with-idle-timer 300 t 'jump-to-org-agenda)
#+end_src

** org contacts
#+begin_src emacs-lisp
(setq org-contacts-files '("~/org/contacts.org"))
#+end_src

** org bullets
#+begin_src emacs-lisp
  (setq org-bullets-bullet-list '("◉" "○" "•" "★"))
#+end_src
** Export
*** Dark backgrounds for code blocks
#+begin_src emacs-lisp
;; (setq org-export-html-style
;;       "<style type=\"text/css\">
;; <!--/*--><![CDATA[/*><!--*/
;; pre.src { color: #f6f3e8 !important; background-color: #242424 !important; }
;; /*]]>*/-->
;; </style>")
#+end_src

* Mail
** SMTP
#+begin_src emacs-lisp
(setq starttls-use-gnutls t
      send-mail-function 'smtpmail-send-it
      message-send-mail-function 'smtpmail-send-it
      smtpmail-starttls-credentials '(("owa.mailseat.com" 587 nil nil))
      smtpmail-auth-credentials (expand-file-name "~/.authinfo")
      smtpmail-default-smtp-server "owa.mailseat.com"
      smtpmail-smtp-server "owa.mailseat.com"
      smtpmail-smtp-service 2525
      smtpmail-debug-info t)
(require 'smtpmail)
#+end_src
** Mu4E
#+begin_src emacs-lisp
  (when  (require 'mu4e nil t)
    (setq mu4e-org-contacts-file "~/org/contacts.org"
          mu4e-maildir       "~/Mail/@workplace@"   ;; top-level Maildir
          mu4e-sent-folder   "/sent"       ;; where do i keep sent mail?
          mu4e-drafts-folder "/Drafts"     ;; where do i keep half-written mail?
          mu4e-trash-folder  "/Trash"     ;; where do i move deleted mail?
          user-mail-address "@first@.@last@@@workplace@.com"
          user-full-name "@First@ @Last@"
          mail-user-agent 'mu4e-user-agent
          mu4e-get-mail-command "pkill -SIGUSR1 offlineimap"
          ;;     mu4e-html2text-command "html2text -nobs -utf8 -width 72"
          mu4e-html2text-command "my-html2text"
          )
    (add-to-list 'mu4e-headers-actions
                 '("org-contact-add" ?o mu4e-action-add-org-contact) t)
    (add-to-list 'mu4e-view-actions
                 '("org-contact-add" ?o mu4e-action-add-org-contact) t)
    (global-set-key (kbd "C-c m") 'mu4e)
  
    ;; Patch in a maildirproc button.
    (defun my-mu4e-maildirproc ()
      (interactive)
      (let ((mu4e-get-mail-command "maildirproc --once"))
        (mu4e-update-mail-show-window)))
    (defun my-add-maildirproc-mu4e-command ()
      (let ((buf (get-buffer-create mu4e~main-buffer-name))
            (inhibit-read-only t))
        (with-current-buffer buf
          (insert
           (mu4e~main-action-str "\t* [m]aildirproc\n" 'my-mu4e-maildirproc)))))
    (define-key mu4e-main-mode-map "m" 'my-mu4e-maildirproc)
    (defadvice mu4e~main-view (after my-ad-maildirproc activate)
      (my-add-maildirproc-mu4e-command)))
#+end_src

* Custom File
#+begin_src emacs-lisp
(setq custom-file (expand-file-name "~/.emacs.d/custom.el"))
(load custom-file)
#+end_src
