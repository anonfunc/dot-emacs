* Introduction
There is a stub [[file:~/.emacs][.emacs file]] which uses org-babel to load this file.

Inspiration from the approach at [[https://github.com/dbr/dotemacs][dbr/dotemacs]] as found in a [[http://www.reddit.com/r/emacs/comments/12pgtg/restarting_from_scratch/][reddit thread]].

* Package Management
** Package setup
Some of this is done in .emacs now, keeping here for documentation.
#+begin_src emacs-lisp :tangle no
  ;(require 'package)
  ;(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  ;(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
  ;(package-initialize)

  ;(when (not package-archive-contents)
  ;  (package-refresh-contents))
#+end_src
** Package install
And now for automatic package installation:
#+begin_src emacs-lisp
  (defun ensure-pkg (pkg)
    (unless (package-installed-p pkg)
      (package-install pkg)))

  (defun ensure-pkgs (packages)
    (mapc 'ensure-pkg packages))

  (defmacro when-installed (pkg &rest body)
    `(when (package-installed-p ,pkg)
       ,@body))
#+end_src
* Behavior Tweaks
** cl
#+begin_src emacs-lisp
(require 'cl)
#+end_src

** s
String libray, used in some of my yasnippets.
[[https://github.com/magnars/s.el][Github link.]]
#+begin_src emacs-lisp
  (ensure-pkg 's)
  (require 's)
#+end_src
** Server mode
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (server-force-delete)
    (setq server-socket-dir (format "/tmp/emacs%d" (user-uid)))
    (server-start))
#+end_src
** Chdir to ~
Depending on how the emacs daemon is started, the current directory is less than ideal.
#+begin_src emacs-lisp
  (cd (expand-file-name "~/"))
#+end_src
** Disable backups
#+begin_src emacs-lisp
  (setq backup-inhibited t)
  (setq auto-save-default nil)
#+end_src
** But use a better auto-save mode
#+begin_src emacs-lisp
  (ensure-pkg 'auto-save-buffers-enhanced)
  (setq auto-save-buffers-enhanced-interval 5)  ; Auto-save on 5 second idle.
  (auto-save-buffers-enhanced-include-only-checkout-path t)  ; Only auto-save VCS tracked files.
  (auto-save-buffers-enhanced t)
#+end_src
** Speed Tweaks
#+begin_src emacs-lisp
(setq font-lock-verbose nil)
(setq vc-handled-backends '(Git))
;(setq jit-lock-defer-time 0.05)
(setq gc-cons-threshold 20000000)
#+end_src
** Modern Sentences
#+begin_src emacs-lisp
(setq sentence-end-double-space nil)
#+end_src
** Zap chars
I prefer the vim style zap.  Leaving old one on M-Z.
#+begin_src emacs-lisp
(autoload 'zap-up-to-char "misc"
  "Kill up to, but not including ARGth occurrence of CHAR.")
(global-set-key (kbd "M-z") 'zap-up-to-char)
(global-set-key (kbd "M-Z") 'zap-to-char)
#+end_src
** Save point position between sessions
#+begin_src emacs-lisp
(require 'saveplace)
(setq-default save-place t)
(setq save-place-file (expand-file-name ".places" user-emacs-directory))
#+end_src
** Mouse support on terminal
#+BEGIN_SRC emacs-lisp
  (xterm-mouse-mode)
#+END_SRC
** Uniquify
#+begin_src emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
#+end_src
** TODO xterm keys
#+begin_src emacs-lisp
  (add-hook 'term-setup-hook
  '(lambda ()
   (define-key function-key-map "\e[1;9A" [M-up])
   (define-key function-key-map "\e[1;9B" [M-down])
   (define-key function-key-map "\e[1;9C" [M-right])
   (define-key function-key-map "\e[1;2A" [S-up])
   (define-key function-key-map "\e[1;9D" [M-left])))
#+end_src
** Follow vc links
Doesn't work.  Odd.
#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src
** TODO Get path from a shell
Doesn't seem to work reliably.
#+begin_src emacs-lisp
  ;(ensure-pkg 'exec-path-from-shell)
  ;(exec-path-from-shell-initialize)
#+end_src
* Interface
** Maximize frame
Needs to be run only on darwin
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (ensure-pkgs '(maxframe))
    (require 'maxframe)
    (setq mf-display-padding-height 60)  ; was 45
    (setq fudge-maximize-frame-first t)
    (defun fudge-maximize-frame (frame)
      (if fudge-maximize-frame-first
          (run-with-idle-timer 0.5 nil 'maximize-frame frame)
        (maximize-frame frame)
        (setq fudge-maximize-frame-first nil)))
    ;; (add-hook 'server-visit-hook 'fudge-maximize-frame t)
    (add-hook 'server-visit-hook 'raise-frame t)
    (add-to-list 'after-make-frame-functions 'fudge-maximize-frame))
#+end_src

#+begin_src emacs-lisp
  ;; Extra strength, for macs.
  (if (featurep 'ns)
      (progn
        (defun ns-raise-emacs ()
          "Raise Emacs."
          (if (display-graphic-p)
              (ns-do-applescript "tell application \"Emacs\" to activate")))

        (add-hook 'server-visit-hook 'ns-raise-emacs)
        (add-hook 'before-make-frame-hook 'ns-raise-emacs)))
#+end_src

** Font
#+begin_src emacs-lisp
;  (when (eq system-type 'darwin)
;    (set-face-attribute 'default nil
;                      :family "Source Code Pro" :height 145 :weight 'extra-light))  ; Extra-light doesn't work, but it's the thought which counts
#+end_src
#+begin_src emacs-lisp
  (ensure-pkg 'dynamic-fonts)
  (require 'dynamic-fonts)
  (add-to-list 'dynamic-fonts-preferred-monospace-fonts "Source Code Pro")
  (setq dynamic-fonts-preferred-monospace-point-size 14)
  (setq dynamic-fonts-preferred-proportional-point-size 14)
  (dynamic-fonts-setup)
#+end_src
** Mac command modifiers
#+begin_src emacs-lisp
(setq mac-command-modifier 'hyper)
(setq mac-option-modifier 'meta)
(setq mac-fn-modifier 'super)
#+end_src
** Mac Kill Frame Hook
#+begin_src emacs-lisp
  (when (featurep 'ns)
      (defun ns-destroy-frame (frame)
        (if (display-graphic-p)
            (ns-do-applescript "tell application \"Finder\" to set visible of process \"Emacs\" to false")))
      (add-to-list 'delete-frame-functions 'ns-destroy-frame))

#+end_src

** Minimal Window Decor
#+begin_src emacs-lisp
  (setq inhibit-splash-screen t)
  (unless (eq system-type 'darwin)
    (menu-bar-mode 0))
  (tool-bar-mode 0)
  (if (boundp 'scroll-bar-mode)
      (scroll-bar-mode 0))
#+end_src

** Color Theme
I'm using a forked solarized version which supports terminals with 256 colors, but with the normal 16 configured in
the solarized theme.  The available packages currently use the 256 color version, which isn't as accurate.
#+begin_src emacs-lisp
;(add-to-list 'custom-theme-load-path (expand-file-name "~/.emacs.d/non-elpa/solarized"))
;(load-theme 'solarized-dark t)
#+end_src

#+begin_src emacs-lisp
;  (ensure-pkg 'color-theme-approximate)
;  (color-theme-approximate-on)
#+end_src

Let's try the most comprehensive one again, but be careful to always
tell it we have a 16 color terminal, not 256.

#+begin_src emacs-lisp
  (ensure-pkg 'solarized-theme)
  (load-theme 'solarized-dark t)
#+end_src
** Don't bother me as much
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
** Control-mode                                                    :disabled:
#+begin_src emacs-lisp
  ;; (ensure-pkgs '(control-mode))
  ;; (require 'control-mode)
  ;; (control-mode-default-setup)
#+end_src
** Clean Modeline with Diminish
#+begin_src emacs-lisp
  (ensure-pkg 'diminish)
  (diminish 'helm-mode)
  (diminish 'auto-revert-mode)
  (diminish 'magit-wip-save-mode)
  (diminish 'smartparens-mode)
  (diminish 'projectile-mode)
  (diminish 'undo-tree-mode)
  (diminish 'highlight-indentation-mode)
#+end_src
** Powerline
#+begin_src emacs-lisp
  (ensure-pkg 'powerline)
  (powerline-default-theme)
  (powerline-center-evil-theme)
#+end_src
* Custom Functionality
** Use custom browser script if possible.
#+begin_src emacs-lisp
  (defun browse-url-remote-open (url &optional ignored)
    "Pass the specified URL to the \"xdg-open\" command.
  xdg-open is a desktop utility that calls your preferred web browser.
  The optional argument IGNORED is not used."
    (interactive (browse-url-interactive-arg "URL: "))
    (if window-system
        (browse-url-default-browser url)
      (call-process "ro" nil 0 nil url)))

  (setq browse-url-browser-function 'browse-url-remote-open)
#+end_src
** Jump to .emacs
#+begin_src emacs-lisp
  (defun my-edit-dot-emacs ()
    (interactive)
    (find-file "~/.emacs.d/init.org"))
  (global-set-key (kbd "C-c e") 'my-edit-dot-emacs)
#+end_src
* Module Configuration
** TODO Iedit                                                      :disabled:
#+begin_src emacs-lisp
  ;; (ensure-pkgs '(iedit))
  ;; (require 'iedit)
  ;; (global-set-key (kbd "C-c ;") 'iedit-mode)
#+end_src
** Multiple Cursors
Consider instead of Iedit?
#+begin_src emacs-lisp
  (ensure-pkg 'multiple-cursors)
  (global-set-key (kbd "C-c ;") 'mc/mark-all-dwim)
#+end_src
** Visual Regex
#+begin_src emacs-lisp
  (ensure-pkg 'visual-regexp)
  (global-set-key (kbd "C-c r") 'vr/replace)
  (global-set-key (kbd "C-c q") 'vr/query-replace)
  ;; if you use multiple-cursors, this is for you:
  (global-set-key (kbd "C-c R") 'vr/mc-mark)
#+end_src
** Helm
#+BEGIN_SRC emacs-lisp
  (ensure-pkgs '(helm))
  (require 'helm-config)
  (setq helm-input-idle-delay 0.01
        helm-idle-delay helm-input-idle-delay)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-x b") 'helm-for-files)
  ;(global-set-key (kbd "C-x b") 'switch-to-buffer)
  (helm-mode)
#+END_SRC
*** Swoop
#+begin_src emacs-lisp
  (ensure-pkg 'helm-swoop)
  (require 'helm-swoop)
  (global-set-key (kbd "M-i") 'helm-swoop)
  (global-set-key (kbd "M-I") 'helm-multi-swoop)
  (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
  (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)
  (setq helm-multi-swoop-edit-save t)
#+end_src
*** Dash                                                           :disabled:
#+begin_src emacs-lisp
  (ensure-pkg 'helm-dash)
  ;(setq helm-dash-common-docsets '("Python 2"))
#+end_src
** Tramp
Fix too long TMPDIR:
#+begin_src emacs-lisp
(setenv "TMPDIR" "/tmp")
#+end_src

Default method:
#+begin_src emacs-lisp
  ;;(setq tramp-default-method "ssh")
#+end_src

Use remote PATH?
#+begin_src emacs-lisp
  (require 'tramp)
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
#+end_src

Cache passwords
#+begin_src emacs-lisp
  (setq password-cache-expiry nil)
#+end_src

Enable remote dir-locals.
#+begin_src emacs-lisp
  (setq enable-remote-dir-locals t)
#+end_src
** DONE Smex                                                       :disabled:
Get used to [[*Helm][Helm]]...
#+begin_src emacs-lisp
  ;; (ensure-pkgs '(smex))
  ;; (require 'smex)
  ;; (smex-initialize)

  ;; (global-set-key (kbd "M-x") 'smex)
  ;; (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  ;; ;; This is your old M-x.
  ;; (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+end_src
** Ibuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (autoload 'ibuffer "ibuffer" "List buffers." t)
  (ensure-pkg 'ibuffer-vc)
  (eval-after-load 'ibuffer
    '(progn
       (add-hook 'ibuffer-hook
                 (lambda ()
                   (ibuffer-vc-set-filter-groups-by-vc-root)
                   (unless (eq ibuffer-sorting-mode 'alphabetic)
                     (ibuffer-do-sort-by-alphabetic))))
       (setq ibuffer-formats
             '((mark modified read-only vc-status-mini " "
                     (name 18 18 :left :elide)
                     " "
                     (size 9 -1 :right)
                     " "
                     (mode 16 16 :left :elide)
                     " "
                     (vc-status 16 16 :left)
                     " "
                     filename-and-process)))))
#+end_src
** Window Management
#+begin_src emacs-lisp
(when (fboundp 'winner-mode)
  (winner-mode 1)
  (global-set-key (kbd "<mouse-8>") 'winner-undo)
  (global-set-key (kbd "<mouse-9>") 'winner-redo))
#+end_src
** Cua Selection mode, but no C-x or C-c
#+begin_src emacs-lisp
(cua-selection-mode t)
#+end_src
** Expand Region                                                   :disabled:
#+begin_src emacs-lisp
;;(ensure-pkg 'expand-region)
;;(global-set-key (kbd "C-=") 'er/expand-region)
;;(global-set-key (kbd "M-=") 'er/expand-region)
#+end_src
** Multiple Cursors                                                :disabled:
#+begin_src emacs-lisp
;; (ensure-pkg 'multiple-cursors)
;;(global-set-key (kbd "C-c C-SPC") 'mc/edit-lines)
;;(global-sqet-key (kbd "M-]") 'mc/mark-next-like-this)
;; (global-set-key (kbd "C-c C-e") 'mc/edit-ends-of-lines)
;; (global-set-key (kbd "C-c C-a") 'mc/edit-beginnings-of-lines)
#+end_src
*** Rectangular region mode                                        :disabled:
#+begin_src emacs-lisp
;; (global-set-key (kbd "C-c RET") 'set-rectangular-region-anchor)
#+end_src;;
*** Mark More like this                                            :disabled:
These are available with an active region.
#+begin_src emacs-lisp
;; (define-key region-bindings-mode-map "a" 'mc/mark-all-like-this)
;; (define-key region-bindings-mode-map "p" 'mc/mark-previous-like-this)
;; (define-key region-bindings-mode-map "n" 'mc/mark-next-like-this)
;; (define-key region-bindings-mode-map "m" 'mc/mark-more-like-this-extended)
#+end_src

#+begin_src emacs-lisp :noweb-ref my-pkg :exports none :tangle no
;;  (:name region-bindings-mode
;;         :type github
;;         :pkgname "fgallina/region-bindings-mode"
;;         :features region-bindings-mode
;;         :after (progn (region-bindings-mode-enable)))
#+end_src
** Ace Jump Mode                                                   :disabled:
#+begin_src emacs-lisp
  ;; (ensure-pkgs '(ace-jump-mode))
  ;; (define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
#+end_src
** Sunrise Commander
#+begin_src emacs-lisp
  (ensure-pkg 'sunrise-commander)
#+end_src
*** Bindings
#+begin_src emacs-lisp
  ;; F11 for sunrise commander
  (global-unset-key (kbd "<f11>"))
  (global-set-key (kbd "<f11>") 'sunrise)
  ;; Safe alternative
  (global-set-key (kbd "C-c s") 'sunrise)
#+end_src
** Magit
#+begin_src emacs-lisp
  (ensure-pkgs '(magit magit-commit-training-wheels))

  ;; Mac uses this homebrew one, which doesn't get found.
  ;; Might go away with exec-path fixes.
  (when (featurep 'ns)
    (setq magit-emacsclient-executable "/usr/local/bin/emacsclient"))
#+end_src
*** Bindings
#+begin_src emacs-lisp
;; F12 for magit
(global-unset-key (kbd "<f12>"))
(global-set-key (kbd "<f12>") 'magit-status)
;; Safe alternative
(global-set-key (kbd "C-c g") 'magit-status)
#+end_src
*** Training wheels
#+BEGIN_SRC emacs-lisp
(require 'magit-commit-training-wheels)
(ad-activate 'magit-log-edit-commit)
#+END_SRC
*** Window advice
From what the emacs.d
#+begin_src emacs-lisp
  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))

  (if (boundp 'magit-quit-window)
      (defadvice magit-quit-window (after magit-restore-screen activate)
        (jump-to-register :magit-fullscreen)))
  ;; Newer magit:
  (if (boundp 'magit-mode-quit-window)
      (defadvice magit-quit-window (after magit-restore-screen activate)
        (jump-to-register :magit-fullscreen)))
#+end_src
*** Magit SVN
#+begin_src emacs-lisp
  (ensure-pkgs '(magit-svn))
  (require 'magit-svn)

  (add-hook 'magit-mode-hook (lambda()
                               (if (magit-svn-get-ref-info)
                                   (magit-svn-mode))))
#+end_src

*** Git-Review bindings under Magit SVN
#+begin_src emacs-lisp
  (setq magit-reviewer-groups '("mp-dev" "qei-tools-reviewers"))

  (defun magit-review-open-link ()
    (interactive)
    (unless (get-buffer magit-process-buffer-name)
      (error "No Git commands have run"))
    (save-excursion
      (set-buffer magit-process-buffer-name)
      (goto-char (point-min))
      (if (search-forward-regexp "https.*" nil t)
          (browse-url-at-point)
        (message "Did not find url"))))

  (defun magit-review-create (group)
    (interactive (list (ido-completing-read "Review group?" magit-reviewer-groups)))
    (magit-run-git "review" "create"
                   "-b" (magit-get-current-branch)
                   "--groups" group)
    (magit-review-open-link))

  (defun magit-review-dcommit ()
    (interactive)
    (magit-run-git "review" "dcommit"))

  (defun magit-review-open ()
    (interactive)
    (let* ((branch (magit-get-current-branch))
           (reviewid (magit-get (format "branch.%s.reviewid" branch))))
      (browse-url (format my-review-url-format reviewid))))

  (defun magit-review-update ()
    (interactive)
    (magit-run-git "review" "update")
    (magit-review-open-link))

  (magit-key-mode-insert-action 'svn "R" "Create Review" 'magit-review-create)
  (magit-key-mode-insert-action 'svn "U" "Update Review" 'magit-review-update)
  (magit-key-mode-insert-action 'svn "D" "Review dcommit" 'magit-review-dcommit)
  (magit-key-mode-insert-action 'svn "O" "Open review" 'magit-review-open)
#+end_src

*** Magit-wip
#+begin_src emacs-lisp
  (require 'magit-wip)
  (global-magit-wip-save-mode 1)
#+end_src
** TODO Battery life in mode line                                  :disabled:
Make mac only.
#+begin_src emacs-lisp
;; (setq battery-mode-line-format "[%b%p%% %t]")
;; (display-battery-mode)
#+end_src

** Ack and Ag
#+BEGIN_SRC emacs-lisp
  (ensure-pkgs '(ack-and-a-half ag wgrep-ag))
  (setq ag-highlight-search t
        ag-reuse-buffers t)
#+END_SRC
** Dired and Dired Extensions
#+begin_src emacs-lisp
  (require 'dired-x)
  (setq dired-omit-files-p t)
  (add-hook 'dired-mode-hook (lambda () (dired-omit-mode)))
  (setq dired-omit-files (concat dired-omit-files "\\|^\\..+"))

  ;; From What the emacs.d
  ;; Make dired less verbose
  (ensure-pkgs '(dired-details dired+))
  (require 'dired-details)
  (setq-default dired-details-hidden-string "")
  (dired-details-install)
#+end_src

** Net Utilities
From [[http://irreal.org/blog/?p%3D2247][irreal]]
#+begin_src emacs-lisp
  (setq ping-program-options '("-c" "4"))
  (defun net-utils-restore-windows ()
    "Restore windows and clean up after ping."
    (interactive)
    (kill-buffer (current-buffer))
    (jump-to-register :net-utils-fullscreen))

  (defadvice net-utils-run-program (around net-utils-big-page activate)
    (window-configuration-to-register :net-utils-fullscreen)
    (let ((buf ad-do-it))
      (switch-to-buffer buf)
      (delete-other-windows)
      (set-temporary-overlay-map
        (let ((map (make-sparse-keymap)))
          (define-key map (kbd "q") 'net-utils-restore-windows)
          map))
      (message "Type \"q\" to restore other windows.")))
#+end_src

** Ham Mode: Edit html as markdown
#+begin_src emacs-lisp
  (ensure-pkg 'ham-mode)
#+end_src
* Programming modes
** Indent settings
Don't use tabs, default to 4 spaces.
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)
#+end_src
** Smartparens
#+begin_src emacs-lisp
  (ensure-pkgs '(smartparens))
  (smartparens-global-mode t)
  (require 'smartparens-config)
  (sp-use-smartparens-bindings)
  (show-smartparens-global-mode t)
#+end_src
** Lisps
*** Paredit                                                        :disabled:
#+begin_src emacs-lisp
  ;; ;; Paredit
  ;; (mapc (lambda (mode)
  ;;         (let ((hook (intern (concat (symbol-name mode)
  ;;                                     "-mode-hook"))))
  ;;           (add-hook hook (lambda () (paredit-mode +1)))))
  ;;       '(emacs-lisp lisp inferior-lisp))
#+end_src
*** Elisp slime nav                                                :disabled:
Adds M-* and M-, to elisp buffers.
#+begin_src emacs-lisp :noweb-ref my-pkg :exports none :tangle no
  ;; (:name elisp-slime-nav
  ;;        :type github
  ;;        :pkgname "purcell/elisp-slime-nav")
#+end_src

#+begin_src emacs-lisp
  ;; (add-hook 'emacs-lisp-mode-hook (lambda () (elisp-slime-nav-mode t)))
#+end_src

** Projectile
Possible fit for project management.
#+begin_src emacs-lisp
  (ensure-pkg 'projectile)
  (setq projectile-enable-caching t)
  (projectile-global-mode)
  (setq projectile-switch-project-action 'projectile-find-dir)
  (ensure-pkg 'helm-projectile)
  (define-key projectile-mode-map (kbd "C-c p h") 'helm-projectile)
#+end_src
** Flycheck
#+begin_src emacs-lisp
  (ensure-pkg 'flycheck)
  (add-hook 'after-init-hook #'global-flycheck-mode)
#+end_src
** Flymake                                                         :disabled:
#+begin_src emacs-lisp
;; (require 'flymake-cursor)
#+end_src

#+begin_src emacs-lisp :noweb-ref my-pkg :exports none :tangle no
;;  (:name flymake-shell
;;         :type github
;;         :pkgname "purcell/flymake-shell")
#+end_src
** Tags
#+begin_src emacs-lisp
(setq tags-revert-without-query t)
#+end_src
** Yasnippet
#+begin_src emacs-lisp
  (ensure-pkgs '(yasnippet))
  (yas-global-mode 1)
  (yas-load-directory "~/.emacs.d/snippets" t)
#+end_src
*** Helm
#+begin_src emacs-lisp
  (ensure-pkg 'helm-c-yasnippet)
  (define-key yas-minor-mode-map (kbd "C-c & s") 'helm-yas-complete)
  (define-key yas-minor-mode-map (kbd "C-c & v") 'helm-yas-visit-snippet-file)
  (define-key yas-minor-mode-map (kbd "C-c & n") 'helm-yas-create-snippet-on-region)
#+end_src
*** Fold-Dwim-Org compatibility shim                               :disabled:
#+begin_src emacs-lisp
  ;; (defalias 'yas/snippets-at-point 'yas--snippets-at-point) ;; fold-dwim-org compatibility
  ;; (setq fold-dwim-org/trigger-keys-block (list [tab] [lefttab] [(control tab)]))
#+end_src
** Groovy
#+begin_src emacs-lisp
  (ensure-pkgs '(groovy-mode))
  (autoload 'groovy-mode "groovy-mode" "Major mode for editing Groovy code." t)
  (add-to-list 'auto-mode-alist '("\.groovy$" . groovy-mode))
  (add-to-list 'interpreter-mode-alist '("groovy" . groovy-mode))
  (add-to-list 'auto-mode-alist '("\.gradle$" . groovy-mode))

  ;;; make Groovy mode electric by default.
  (add-hook 'groovy-mode-hook
            '(lambda ()
               (require 'groovy-electric)
               (setq tab-width 2)
               (groovy-electric-mode)))
#+end_src

** Imenu
#+begin_src emacs-lisp
  (ensure-pkgs '(imenu-anywhere))
  (setq-default imenu-generic-expression '(nil))
  (global-set-key (kbd "C-.") 'imenu-anywhere)

  ;; Add a mark to pop back to
  (defadvice imenu-anywhere (before push-mark activate)
    (push-mark))
#+end_src
** Global whitespace cleanup
From http://stackoverflow.com/questions/3533703/emacs-delete-trailing-whitespace-except-current-line
#+begin_src emacs-lisp
  (defun delete-trailing-whitespace-except-current-line ()
    (interactive)
    (let ((begin (line-beginning-position))
          (end (line-end-position)))
      (save-excursion
        (when (< (point-min) begin)
          (save-restriction
            (narrow-to-region (point-min) (1- begin))
            (delete-trailing-whitespace)))
        (when (> (point-max) end)
          (save-restriction
            (narrow-to-region (1+ end) (point-max))
            (delete-trailing-whitespace))))))
#+end_src
From "What the emacs.d!?"
#+begin_src emacs-lisp
  (defun cleanup-buffer-safe ()
    "Perform a bunch of safe operations on the whitespace content of a buffer.
  Does not indent buffer, because it is used for a before-save-hook, and that
  might be bad."
    (interactive)
    (untabify (point-min) (point-max))
    (delete-trailing-whitespace-except-current-line)
    (set-buffer-file-coding-system 'utf-8))

  ;; Various superfluous white-space. Just say no.
  (add-hook 'before-save-hook 'cleanup-buffer-safe)
#+end_src
** Python!
Use elpy, and tweak indentation.
#+begin_src emacs-lisp
  (ensure-pkgs '(yasnippet flymake-cursor elpy))
  (elpy-enable)
  (elpy-use-ipython)
  (setq elpy-default-minor-modes (remove 'flymake-mode elpy-default-minor-modes))
  (elpy-clean-modeline)
  ; Fix yas-snippet-dirs stealing
  (setq yas-snippet-dirs (cons "~/.emacs.d/snippets" yas-snippet-dirs))

  (add-hook 'python-mode-hook
            (lambda ()
              (setq tab-width 2)
              (setq python-indent 2)))
#+end_src
*** TODO Eshell support for virtualenvs
Work in progress.
#+begin_src emacs-lisp
  (defun eshell/workon (virtualenv)
    (let ((virtualenv-workon-starts-python nil))
      (virtualenv-workon virtualenv)
      (setq exec-path (split-string (getenv "PATH") ":"))))
#+end_src

** HTML and Jinja
#+begin_src emacs-lisp
  (ensure-pkgs '(web-mode))
  (require 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (setq web-mode-engines-alist '(("jinja2"    . "\\.html?\\'")))
  (when-installed 'smartparens (sp-local-tag '(web-mode) "<" "<_>" "</_>" :transform 'sp-match-sgml-tags))
#+end_src
*** TODO Emmet mode!
Research ac-emmet?
#+begin_src emacs-lisp
  (ensure-pkg 'emmet-mode)
  (require 'emmet-mode)
  (add-hook 'sgml-mode-hook 'emmet-mode)
  (add-hook 'web-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook  'emmet-mode)
  (add-hook 'emmet-mode-hook (lambda () (setq emmet-indentation 2)))
  (setq emmet-move-cursor-between-quotes t)
#+end_src
** Javascript
#+begin_src emacs-lisp
  (ensure-pkgs '(js2-mode))
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-hook 'js2-mode-hook
            (lambda ()
              (setq tab-width 2)
              (setq js2-basic-offset 2)
              (add-hook 'before-save-hook 'delete-trailing-whitespace nil t)))
#+end_src
*** Skewer mode                                                    :disabled:
Only useful for javascript and css, as HTML changes don't get reflected.
The missing pieces should be filled in by LiveReload...
#+begin_src emacs-lisp
  ;(ensure-pkg 'skewer-mode)
  ;(add-hook 'js2-mode-hook 'skewer-mode)
  ;; If we need it for css/html/web-mode:
  ;(add-hook 'css-mode-hook 'skewer-css-mode)
  ;(add-hook 'html-mode-hook 'skewer-html-mode)
  ;(add-hook 'web-mode-hook 'skewer-html-mode)
#+end_src

Snippet to load javascript:
#+BEGIN_SRC html
<script src="http://localhost:8080/skewer"/>
#+END_SRC
* Org-mode Setup
** Require
#+begin_src emacs-lisp
(ensure-pkg 'org-plus-contrib)
(require 'org)
;(require 'org-protocol)
#+end_src
** Bindings
*** Speed keys
From worg: http://orgmode.org/worg/org-hacks.html
#+begin_src emacs-lisp
  (defun ded/org-show-next-heading-tidily ()
    "Show next entry, keeping other entries closed."
    (if (save-excursion (end-of-line) (outline-invisible-p))
        (progn (org-show-entry) (show-children))
      (outline-next-heading)
      (unless (and (bolp) (org-on-heading-p))
        (org-up-heading-safe)
        (hide-subtree)
        (error "Boundary reached"))
      (org-overview)
      (org-reveal t)
      (org-show-entry)
      (show-children)))

  (defun ded/org-show-previous-heading-tidily ()
    "Show previous entry, keeping other entries closed."
    (let ((pos (point)))
      (outline-previous-heading)
      (unless (and (< (point) pos) (bolp) (org-on-heading-p))
        (goto-char pos)
        (hide-subtree)
        (error "Boundary reached"))
      (org-overview)
      (org-reveal t)
      (org-show-entry)
      (show-children)))

  (setq org-use-speed-commands t)
  (add-to-list 'org-speed-commands-user
               '("n" ded/org-show-next-heading-tidily))
  (add-to-list 'org-speed-commands-user
               '("p" ded/org-show-previous-heading-tidily))
#+end_src
*** Capture
#+begin_src emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
#+end_src
** Configure
#+begin_src emacs-lisp
  (setq org-completion-use-ido t
        org-special-ctrl-a/e t
        org-special-ctrl-k t
        org-yank-adjusted-subtrees t
        org-enforce-todo-checkbox-dependencies t
        org-enforce-todo-dependencies t
        org-default-notes-file "~/org/notes.org"
        org-log-into-drawer t
        org-clock-into-drawer t
        org-clock-out-remove-zero-time-clocks t
        org-use-fast-todo-selection t
        org-agenda-start-on-weekday nil
        org-use-speed-commands t
        org-treat-S-cursor-todo-selection-as-state-change nil)
#+end_src
** Keywords and to-dos
#+begin_src emacs-lisp
(setq org-todo-keywords '((sequence "TODO(t)" "DONE(d)")))
#+end_src
** Capture Templates
#+begin_src emacs-lisp
  ;; Inspiration from http://doc.norang.ca/org-mode.html#Capture
  (setq org-capture-templates `(("t" "todo" entry (file ,org-default-notes-file)
                                 "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
                                ("e" "email" entry (file ,org-default-notes-file)
                                 "* TODO Email: %a\nSCHEDULED: %t\n%U\n" :clock-in t :clock-resume t :immediate-finish t)
                                ("l" "log" entry (file+datetree ,org-default-notes-file)
                                 "* %?\n%U\n" :clock-in t :clock-resume t)
                                ("i" "Interruption" entry (file+datetree ,org-default-notes-file)
                                 "* %? :interruption:\n%U\n" :clock-in t :clock-resume t)
                                ("m" "Meeting" entry (file ,org-default-notes-file)
                                 "* Meeting: %?\n%T\n" :clock-in t :clock-resume t)
                                ("h" "Habit" entry (file ,org-default-notes-file)
                                 "* TODO %?\n%U\n%a\nSCHEDULED: %(format-time-string \"<%Y-%m-%d %a .+1d/3d>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: TODO\n:END:\n")
                                ))

  ;; Cleanup empty clocks, also from norang:
  ;; Remove empty LOGBOOK drawers on clock out
  (defun bh/remove-empty-drawer-on-clock-out ()
    (interactive)
    (save-excursion
      (beginning-of-line 0)
      (org-remove-empty-drawer-at "LOGBOOK" (point))))

  (add-hook 'org-clock-out-hook 'bh/remove-empty-drawer-on-clock-out 'append)
#+end_src
** Org Modules
*** Org-Velocity
#+begin_src emacs-lisp
  (require 'org-velocity)
  (global-set-key (kbd "C-c v") 'org-velocity-read)
  (setq org-velocity-bucket "~/org/velocity.org"
        org-velocity-always-use-bucket t
        org-velocity-exit-on-match nil)
#+end_src
*** Org Pomodoro
M-x org-pomodoro
#+begin_src emacs-lisp
  (ensure-pkgs '(org-pomodoro))
  (require 'org-pomodoro)
  (global-set-key (kbd "C-c p") 'org-pomodoro)
#+end_src
*** MobileOrg
#+begin_src emacs-lisp
  (setq org-mobile-directory "~/.MobileOrg")

  ;; From stackoverflow:

  (defvar my-org-mobile-sync-timer nil)

  (defvar my-org-mobile-sync-secs (* 60 2)) ;; Sync every two minutes

  (defun my-org-mobile-sync-pull-and-push ()
    (interactive)
    (org-mobile-pull)
    (org-mobile-push))

  (defun my-org-mobile-sync-start ()
    "Start automated `org-mobile-push'"
    (interactive)
    (setq my-org-mobile-sync-timer
          (run-with-idle-timer my-org-mobile-sync-secs t
                               'my-org-mobile-sync-pull-and-push)))

  (defun my-org-mobile-sync-stop ()
    "Stop automated `org-mobile-push'"
    (interactive)
    (cancel-timer my-org-mobile-sync-timer))

  (my-org-mobile-sync-start)
#+end_src
** Defunct                                                         :disabled:
*** Org Mode notifications

(require 'appt)
(setq appt-message-warning-time 15
      appt-display-mode-line t
      appt-display-format 'window)
(appt-activate 1)
(display-time)

(org-agenda-to-appt t)
(add-hook 'org-finalize-agenda-hook 'org-agenda-to-appt)

*** Stay on task (Idle display of Agenda)

   ;; From http://article.gmane.org/gmane.emacs.orgmode/23047
   (defun jump-to-org-agenda ()
     (interactive)
     (let ((buf (get-buffer "*Org Agenda*"))
           wind)
       (if buf
           (if (setq wind (get-buffer-window buf))
               (select-window wind)
             (if (called-interactively-p)
                 (progn
                   (select-window (display-buffer buf t t))
                   (org-fit-window-to-buffer)
                   ;; (org-agenda-redo)
                   )
               (with-selected-window (display-buffer buf)
                 (org-fit-window-to-buffer)
                 ;; (org-agenda-redo)
                 )))
         (call-interactively 'org-agenda-list)))
     ;;(let ((buf (get-buffer "*Calendar*")))
     ;;  (unless (get-buffer-window buf)
     ;;    (org-agenda-goto-calendar)))
     )
   (let ((timer (timer-create)))
     (timer-set-function timer 'jump-to-org-agenda)
     (timer-set-idle-time timer 300 t)
     (timer-activate-when-idle timer nil))
   ;;(run-with-idle-timer 300 t 'jump-to-org-agenda)

*** Export
**** Dark backgrounds for code blocks

;; (setq org-export-html-style
;;       "<style type=\"text/css\">
;; <!--/*--><![CDATA[/*><!--*/
;; pre.src { color: #f6f3e8 !important; background-color: #242424 !important; }
;; /*]]>*/-->
;; </style>")

* ERC
Using bouncer.
#+begin_src emacs-lisp
    (load-file (expand-file-name "~/.emacs.d/secrets.el"))
    (defun my-erc ()
      (interactive)
      (erc
        :server "localhost"
        :port "6667"
        :nick my-erc-name
        :password my-erc-password))
#+end_src

* Evil
#+begin_src emacs-lisp
  (ensure-pkgs '(evil))
  ; http://puntoblogspot.blogspot.com/2014/01/evil-exact-amount-of-vim-in-emacs-but.html
  (require 'evil)
  ;(setcdr evil-insert-state-map nil)
  ;(define-key evil-insert-state-map [escape] 'evil-normal-state)
#+end_src
** Evil Extensions
#+begin_src emacs-lisp
  (ensure-pkg 'evil-matchit)
  (require 'evil-matchit)
  (global-evil-matchit-mode 1)

  (ensure-pkg 'evil-nerd-commenter)
  (require 'evil-nerd-commenter)
  (evilnc-default-hotkeys)

  (ensure-pkg 'surround)
  (require 'surround)
  (global-surround-mode 1)
#+end_src
* Email with Mu4E
** Package loading
#+begin_src emacs-lisp
  (add-to-list 'load-path (expand-file-name "~/ext/mu-0.9.9.5/mu4e"))
  (require 'mu4e)
#+end_src
** Basic Configuration
#+begin_src emacs-lisp
  (setq mu4e-maildir       "~/Maildir"   ;; top-level Maildir
        mu4e-sent-folder   "/Sent Items"       ;; folder for sent messages
        mu4e-drafts-folder "/Drafts"     ;; unfinished messages
        mu4e-trash-folder  "/Deleted Items"      ;; trashed messages
        mu4e-refile-folder "/Archive"   ;; saved messages
        mu4e-get-mail-command "offlineimap"
        mu4e-update-interval 600  ;; 10 minutes
        mu4e-html2text-command "html2text -width 72")
#+end_src
See also [[http://www.djcbsoftware.nl/code/mu/mu4e/Maildir-searches.html#Maildir-searches][Setting up maildir shortcuts]]
** Sending Mail
#+begin_src emacs-lisp
  ;; tell message-mode how to send mail
  (setq message-send-mail-function 'smtpmail-send-it)
  ;; (setq smtpmail-smtp-server "set in secrets file")

  (setq smtpmail-queue-mail  nil  ;; start in non-queuing mode
        smtpmail-queue-dir   "~/Maildir/queue/cur")
#+end_src
** Jump to mu4e
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c m") 'mu4e)
#+end_src
** Misc
#+begin_src emacs-lisp
  (require 'org-mu4e)

  (setq mail-user-agent 'mu4e-user-agent)

  (require 'gnus-dired)
  ;; make the `gnus-dired-mail-buffers' function also work on
  ;; message-mode derived modes, such as mu4e-compose-mode
  (defun gnus-dired-mail-buffers ()
    "Return a list of active message buffers."
    (let (buffers)
      (save-current-buffer
        (dolist (buffer (buffer-list t))
          (set-buffer buffer)
          (when (and (derived-mode-p 'message-mode)
                     (null message-sent-message-via))
            (push (buffer-name buffer) buffers))))
      (nreverse buffers)))

  (setq gnus-dired-mail-mode 'mu4e-user-agent)
  (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
#+end_src
* Custom File
#+begin_src emacs-lisp
(setq custom-file (expand-file-name "~/.emacs.d/custom.el"))
(load custom-file)
#+end_src
