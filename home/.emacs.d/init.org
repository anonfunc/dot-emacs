* Introduction
There is a stub [[file:~/.emacs][.emacs file]] which uses org-babel to load this file.

Inspiration from the approach at [[https://github.com/dbr/dotemacs][dbr/dotemacs]] as found in a [[http://www.reddit.com/r/emacs/comments/12pgtg/restarting_from_scratch/][reddit thread]].

* Package Management
** Package setup
Some of this is done in .emacs now, keeping here for documentation.
#+begin_src emacs-lisp :tangle no
  ;(require 'package)
  ;(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  ;(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
  ;(package-initialize)

  ;(when (not package-archive-contents)
  ;  (package-refresh-contents))
#+end_src
** Package install
And now for automatic package installation:
#+begin_src emacs-lisp
  (defun ensure-pkgs (packages)
    (mapc (lambda (pkg) (or (package-installed-p pkg)
                            (package-install pkg))) packages))

  (ensure-pkgs '(melpa s ibuffer-vc ido-ubiquitous dired+
                 ace-jump-mode expand-region multiple-cursors
                 sunrise-commander magit
                 magit-commit-training-wheels org-plus-contrib))
#+end_src
* Behavior Tweaks
** cl
#+begin_src emacs-lisp
(require 'cl)
#+end_src

** s
String libray, used in some of my yasnippets.
[[https://github.com/magnars/s.el][Github link.]]
#+begin_src emacs-lisp
  (require 's)
#+end_src
** Server mode
#+begin_src emacs-lisp
(server-start)
#+end_src
** Chdir to ~
Depending on how the emacs daemon is started, the current directory is less than ideal.

#+begin_src emacs-lisp
  (cd (expand-file-name "~/"))
#+end_src

** Disable backups
#+begin_src emacs-lisp
  (setq backup-inhibited t)
  (setq auto-save-default nil)
#+end_src
** Speed Tweaks
#+begin_src emacs-lisp
(setq font-lock-verbose nil)
(setq vc-handled-backends '(Git))
;(setq jit-lock-defer-time 0.05)
#+end_src
** Modern Sentences
#+begin_src emacs-lisp
(setq sentence-end-double-space nil)
#+end_src
** Zap chars
I prefer the vim style zap.  Leaving old one on M-Z.

#+begin_src emacs-lisp
(autoload 'zap-up-to-char "misc"
  "Kill up to, but not including ARGth occurrence of CHAR.")
(global-set-key (kbd "M-z") 'zap-up-to-char)
(global-set-key (kbd "M-Z") 'zap-to-char)
#+end_src
** Save point position between sessions
#+begin_src emacs-lisp
(require 'saveplace)
(setq-default save-place t)
(setq save-place-file (expand-file-name ".places" user-emacs-directory))
#+end_src
** Mouse support on terminal
#+BEGIN_SRC emacs-lisp
  (unless window-system (xterm-mouse-mode))
#+END_SRC
** Uniquify
#+begin_src emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
#+end_src
* Interface
** Maximize frame
#+begin_src emacs-lisp
  (ensure-pkgs '(maxframe))
  (require 'maxframe)
  (setq fudge-maximize-frame-first t)
  (defun fudge-maximize-frame (frame)
    (if fudge-maximize-frame-first
        (run-with-idle-timer 0.5 nil 'maximize-frame frame)
      (maximize-frame frame)
      (setq fudge-maximize-frame-first nil)))
  (add-hook 'server-visit-hook 'fudge-maximize-frame t)
  (add-hook 'server-visit-hook 'raise-frame t)
  (add-to-list 'after-make-frame-functions 'fudge-maximize-frame)
#+end_src
** Mac command modifiers
#+begin_src emacs-lisp
(setq mac-command-modifier 'hyper)
(setq mac-option-modifier 'meta)
(setq mac-fn-modifier 'super)
#+end_src
** Font
The same font can have different names on each platform.
+begin_src emacs-lisp
  (defun my-font ()
    (case window-system
      ('x  (set-frame-font " 18"))))
  (my-font)
+end_src

** Minimal Window Decor
#+begin_src emacs-lisp
  (setq inhibit-splash-screen t)
  (unless (eq window-system 'ns)
    (menu-bar-mode 1))
  (tool-bar-mode 0)
  (if (boundp 'scroll-bar-mode)
      (scroll-bar-mode 0))
#+end_src

** Color scheme
I'm using a forked solarzied version which supports terminals with 256 colors, but with the normal 16 configured in
the solarized theme.  The available packages currently use the 256 color version, which isn't as accurate.

#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path (expand-file-name "~/.emacs.d/non-elpa/solarized"))
(load-theme 'solarized-dark t)
#+end_src
** Don't bother me as much
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
** Control-mode
#+begin_src emacs-lisp
  (ensure-pkgs '(control-mode))
  (require 'control-mode)
  (control-mode-default-setup)
#+end_src
* Custom Functionality
** Jump to .emacs
#+begin_src emacs-lisp
;; Jump to .emacs
(defun my-edit-dot-emacs ()
  (interactive)
  (find-file "~/.emacs.d/init.org"))
(global-set-key (kbd "C-c e") 'my-edit-dot-emacs)
#+end_src

* Module Configuration
** Iedit
#+begin_src emacs-lisp
  (ensure-pkgs '(iedit))
  (require 'iedit)
  (global-set-key (kbd "C-c ;") 'iedit-mode)
#+end_src
** Helm
#+BEGIN_SRC emacs-lisp
  (ensure-pkgs '(helm))
  (require 'helm-config)
#+END_SRC
** Tramp
Fix too long TMPDIR:
#+begin_src emacs-lisp
(setenv "TMPDIR" "/tmp")
#+end_src

Default method:
#+begin_src emacs-lisp
  ;;(setq tramp-default-method "ssh")
#+end_src

Use remote PATH?
#+begin_src emacs-lisp
  (require 'tramp)
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
#+end_src
** Smex
#+begin_src emacs-lisp
  (ensure-pkgs '(smex))
  (require 'smex)
  (smex-initialize)

  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  ;; This is your old M-x.
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+end_src
** IDO Everywhere
#+begin_src emacs-lisp
(ido-mode t)
(ido-ubiquitous-mode)
#+end_src

** Ibuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (autoload 'ibuffer "ibuffer" "List buffers." t)
  (eval-after-load 'ibuffer
    '(progn
       (add-hook 'ibuffer-hook
                 (lambda ()
                   (ibuffer-vc-set-filter-groups-by-vc-root)
                   (unless (eq ibuffer-sorting-mode 'alphabetic)
                     (ibuffer-do-sort-by-alphabetic))))
       (setq ibuffer-formats
             '((mark modified read-only vc-status-mini " "
                     (name 18 18 :left :elide)
                     " "
                     (size 9 -1 :right)
                     " "
                     (mode 16 16 :left :elide)
                     " "
                     (vc-status 16 16 :left)
                     " "
                     filename-and-process)))))
#+end_src
** Window Management
#+begin_src emacs-lisp
(when (fboundp 'winner-mode)
  (winner-mode 1)
  (global-set-key (kbd "<mouse-8>") 'winner-undo)
  (global-set-key (kbd "<mouse-9>") 'winner-redo))
#+end_src
** Cua Selection mode, but no C-x or C-c
#+begin_src emacs-lisp
(cua-selection-mode t)
#+end_src
** Expand Region
#+begin_src emacs-lisp
;;(global-set-key (kbd "C-=") 'er/expand-region)
;;(global-set-key (kbd "M-=") 'er/expand-region)
#+end_src
** Multiple Cursors
#+begin_src emacs-lisp
;;(global-set-key (kbd "C-c C-SPC") 'mc/edit-lines)
;;(global-sqet-key (kbd "M-]") 'mc/mark-next-like-this)
;; (global-set-key (kbd "C-c C-e") 'mc/edit-ends-of-lines)
;; (global-set-key (kbd "C-c C-a") 'mc/edit-beginnings-of-lines)
#+end_src
*** Rectangular region mode
#+begin_src emacs-lisp
;; (global-set-key (kbd "C-c RET") 'set-rectangular-region-anchor)
#+end_src;;
*** Mark More like this
These are available with an active region.
#+begin_src emacs-lisp
;; (define-key region-bindings-mode-map "a" 'mc/mark-all-like-this)
;; (define-key region-bindings-mode-map "p" 'mc/mark-previous-like-this)
;; (define-key region-bindings-mode-map "n" 'mc/mark-next-like-this)
;; (define-key region-bindings-mode-map "m" 'mc/mark-more-like-this-extended)
#+end_src

#+begin_src emacs-lisp :noweb-ref my-pkg :exports none :tangle no
;;  (:name region-bindings-mode
;;         :type github
;;         :pkgname "fgallina/region-bindings-mode"
;;         :features region-bindings-mode
;;         :after (progn (region-bindings-mode-enable)))
#+end_src
** Ace Jump Mode
#+begin_src emacs-lisp
(ensure-pkgs '(ace-jump-mode))
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
#+end_src
** Sunrise Commander
*** Bindings
#+begin_src emacs-lisp
  ;; F11 for sunrise commander
  (global-unset-key (kbd "<f11>"))
  (global-set-key (kbd "<f11>") 'sunrise)
  ;; Safe alternative
  (global-set-key (kbd "C-c s") 'sunrise)
#+end_src
** Magit
*** Bindings
#+begin_src emacs-lisp
;; F12 for magit
(global-unset-key (kbd "<f12>"))
(global-set-key (kbd "<f12>") 'magit-status)
;; Safe alternative
(global-set-key (kbd "C-c g") 'magit-status)
#+end_src
*** Training wheels
#+BEGIN_SRC emacs-lisp
(require 'magit-commit-training-wheels)
(ad-activate 'magit-log-edit-commit)
#+END_SRC
*** Window advice
From what the emacs.d
#+begin_src emacs-lisp
  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))

  (defun magit-quit-session ()
    "Restores the previous window configuration and kills the magit buffer"
    (interactive)
    (kill-buffer)
    (jump-to-register :magit-fullscreen))

  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)
#+end_src
*** Magit SVN
#+begin_src emacs-lisp
  (ensure-pkgs '(magit-svn))
  (require 'magit-svn)

  (add-hook 'magit-mode-hook (lambda()
                               (if (magit-svn-get-ref-info)
                                   (magit-svn-mode))))
#+end_src

*** Git-Review bindings under Magit SVN
#+begin_src emacs-lisp
    (setq magit-reviewer-group "mp-dev")

    (defun magit-review-open-link ()
      (interactive)
      (unless (get-buffer magit-process-buffer-name)
        (error "No Git commands have run"))
      (save-excursion
        (set-buffer magit-process-buffer-name)
        (goto-char (point-min))
        (if (search-forward-regexp "https.*" nil t)
            (browse-url-at-point)
          (message "Did not find url"))))

    (magit-define-command review-create ()
      (interactive)
      (magit-run-git "review" "create"
                     "-b" (magit-get-current-branch)
                     "--groups" magit-reviewer-group)
      (magit-review-open-link))

    (magit-define-command review-dcommit ()
      (interactive)
      (magit-run-git "review" "dcommit"))

    (magit-define-command review-update ()
      (interactive)
      (magit-run-git "review" "update")
      (magit-review-open-link))

    (magit-key-mode-insert-action 'svn "R" "Create Review" 'magit-review-create)
    (magit-key-mode-insert-action 'svn "U" "Update Review" 'magit-review-update)
    (magit-key-mode-insert-action 'svn "D" "Review dcommit" 'magit-review-dcommit)
#+end_src

** Battery life in mode line
#+begin_src emacs-lisp
;; (setq battery-mode-line-format "[%b%p%% %t]")
;; (display-battery-mode)
#+end_src

** Ack and Ag
#+BEGIN_SRC emacs-lisp
    (ensure-pkgs '(ack-and-a-half ag wgrep-ag))
    (setq ag-highlight-search t
          ag-reuse-buffers 't)
#+END_SRC
** Dired and Dired Extensions
#+begin_src emacs-lisp
  (require 'dired-x)
  (setq dired-omit-files-p t)
  (add-hook 'dired-mode-hook (lambda () (dired-omit-mode)))


;; From What the emacs.d
;; Make dired less verbose
(ensure-pkgs '(dired-details))
(require 'dired-details)
(setq-default dired-details-hidden-string "")
(dired-details-install)
#+end_src

* Programming modes
** Indent settings
Don't use tabs, default to 4 spaces.
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq tab-width 4)
(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)
#+end_src
** Lisps
*** Paredit
#+begin_src emacs-lisp
  ;; ;; Paredit
  ;; (mapc (lambda (mode)
  ;;         (let ((hook (intern (concat (symbol-name mode)
  ;;                                     "-mode-hook"))))
  ;;           (add-hook hook (lambda () (paredit-mode +1)))))
  ;;       '(emacs-lisp lisp inferior-lisp))
#+end_src
*** Elisp slime nav
Adds M-* and M-, to elisp buffers.
#+begin_src emacs-lisp :noweb-ref my-pkg :exports none :tangle no
  ;; (:name elisp-slime-nav
  ;;        :type github
  ;;        :pkgname "purcell/elisp-slime-nav")
#+end_src

#+begin_src emacs-lisp
  ;; (add-hook 'emacs-lisp-mode-hook (lambda () (elisp-slime-nav-mode t)))
#+end_src

** Projectile
Possible fit for project management.
#+begin_src emacs-lisp
;(setq projectile-enable-caching t)
;(projectile-global-mode)
#+end_src
** Flymake
#+begin_src emacs-lisp
;; (require 'flymake-cursor)
#+end_src

#+begin_src emacs-lisp :noweb-ref my-pkg :exports none :tangle no
;;  (:name flymake-shell
;;         :type github
;;         :pkgname "purcell/flymake-shell")
#+end_src
** Tags
#+begin_src emacs-lisp
(setq tags-revert-without-query t)
#+end_src
** Yasnippet
#+begin_src emacs-lisp
  (ensure-pkgs '(yasnippet))
  (yas-global-mode 1)
  (yas-load-directory "~/.emacs.d/snippets" t)
#+end_src

*** Fold-Dwim-Org compatibility shim
#+begin_src emacs-lisp
(defalias 'yas/snippets-at-point 'yas--snippets-at-point) ;; fold-dwim-org compatibility
(setq fold-dwim-org/trigger-keys-block (list [tab] [lefttab] [(control tab)]))
#+end_src
** smartparens
modern lightweight smart parens/auto-insert/wrapping package for Emacs
#+begin_src emacs-lisp :noweb-ref my-pkg :exports none :tangle no
  ;; (:name smartparens
  ;;        :type github
  ;;        :pkgname "Fuco1/smartparens"
  ;;        :depends dash
  ;;        :feature smartparens
  ;;        :after)
#+end_src

#+begin_src emacs-lisp
;;  (smartparens-global-mode t)

  ;;; key binds
;;  (define-key sp-keymap (kbd "C-M-f") 'sp-forward-sexp)
;;  (define-key sp-keymap (kbd "C-M-b") 'sp-backward-sexp)
;;  (define-key sp-keymap (kbd "C-M-d") 'sp-down-sexp)
;;  (define-key sp-keymap (kbd "C-M-a") 'sp-backward-down-sexp)
;;  (define-key sp-keymap (kbd "C-M-e") 'sp-up-sexp)
;;  (define-key sp-keymap (kbd "C-M-u") 'sp-backward-up-sexp)
;;  (define-key sp-keymap (kbd "C-M-n") 'sp-next-sexp)
;;  (define-key sp-keymap (kbd "C-M-p") 'sp-previous-sexp)
;;  (define-key sp-keymap (kbd "C-M-k") 'sp-kill-sexp)
;;  (sp-add-ban-insert-pair-in-string "'")
#+end_src
*** dash
modern list library
#+begin_src emacs-lisp :noweb-ref my-pkg :exports none :tangle no
  ;; (:name dash
  ;;        :type github
  ;;        :pkgname "magnars/dash.el")
#+end_src

** Groovy
#+begin_src emacs-lisp
  (ensure-pkgs '(groovy-mode))
  (autoload 'groovy-mode "groovy-mode" "Major mode for editing Groovy code." t)
  (add-to-list 'auto-mode-alist '("\.groovy$" . groovy-mode))
  (add-to-list 'interpreter-mode-alist '("groovy" . groovy-mode))
  (add-to-list 'auto-mode-alist '("\.gradle$" . groovy-mode))

  ;;; make Groovy mode electric by default.
  (add-hook 'groovy-mode-hook
            '(lambda ()
               (require 'groovy-electric)
               (setq tab-width 2)
               (groovy-electric-mode)))
#+end_src

** Imenu
#+begin_src emacs-lisp
  (ensure-pkgs '(imenu-anywhere))
  (setq-default imenu-generic-expression '(nil))
  (global-set-key (kbd "C-.") 'imenu-anywhere)

  ;; Add a mark to pop back to
  (defadvice imenu-anywhere (before push-mark activate)
    (push-mark))
#+end_src
** Python!
Use elpy, and tweak indentation.
#+begin_src emacs-lisp
  (ensure-pkgs '(yasnippet flymake-cursor elpy))

  (elpy-enable)
  (elpy-use-ipython)
  ; Fix yas-snippet-dirs stealing
  (setq yas-snippet-dirs (cons "~/.emacs.d/snippets" yas-snippet-dirs))

  (add-hook 'python-mode-hook
            (lambda ()
              (setq tab-width 2)
              (setq python-indent 2)
              (add-hook 'before-save-hook 'delete-trailing-whitespace nil t)))
#+end_src
** Global whitespace cleanup
From "What the emacs.d!?"
#+begin_src emacs-lisp
  (defun cleanup-buffer-safe ()
    "Perform a bunch of safe operations on the whitespace content of a buffer.
  Does not indent buffer, because it is used for a before-save-hook, and that
  might be bad."
    (interactive)
    (untabify (point-min) (point-max))
    (delete-trailing-whitespace)
    (set-buffer-file-coding-system 'utf-8))

  ;; Various superfluous white-space. Just say no.
  (add-hook 'before-save-hook 'cleanup-buffer-safe)
#+end_src

** HTML and Jinja
#+begin_src emacs-lisp
  (ensure-pkgs '(web-mode))
  (require 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (setq web-mode-engines-alist '(("jinja2"    . "\\.html?\\'")))
#+end_src
* Org-mode Setup
** Require
#+begin_src emacs-lisp
(require 'org)
;(require 'org-protocol)
#+end_src

** Configure
#+begin_src emacs-lisp
    (setq org-completion-use-ido t
          org-special-ctrl-a/e t
          org-special-ctrl-k t
          org-yank-adjusted-subtrees t
          org-enforce-todo-checkbox-dependencies t
          org-enforce-todo-dependencies t
          org-default-notes-file "~/org/notes.org")
#+end_src
** Capture Templates

** Bindings
*** Capture
#+begin_src emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
#+end_src

** Org-Velocity
+begin_src emacs-lisp
(require 'org-velocity)

(global-set-key (kbd "C-c v") 'org-velocity-read)
(setq org-velocity-bucket "~/org/velocity.org")
(setq org-velocity-always-use-bucket t)
(setq org-velocity-exit-on-match t)
+end_src
** Org Pomodoro
M-x org-pomodoro
#+begin_src emacs-lisp
  (ensure-pkgs '(org-pomodoro))
#+end_src
** Org Mode notifications

(require 'appt)
(setq appt-message-warning-time 15
      appt-display-mode-line t
      appt-display-format 'window)
(appt-activate 1)
(display-time)

(org-agenda-to-appt t)
(add-hook 'org-finalize-agenda-hook 'org-agenda-to-appt)

** Stay on task (Idle display of Agenda)

  ;; From http://article.gmane.org/gmane.emacs.orgmode/23047
  (defun jump-to-org-agenda ()
    (interactive)
    (let ((buf (get-buffer "*Org Agenda*"))
          wind)
      (if buf
          (if (setq wind (get-buffer-window buf))
              (select-window wind)
            (if (called-interactively-p)
                (progn
                  (select-window (display-buffer buf t t))
                  (org-fit-window-to-buffer)
                  ;; (org-agenda-redo)
                  )
              (with-selected-window (display-buffer buf)
                (org-fit-window-to-buffer)
                ;; (org-agenda-redo)
                )))
        (call-interactively 'org-agenda-list)))
    ;;(let ((buf (get-buffer "*Calendar*")))
    ;;  (unless (get-buffer-window buf)
    ;;    (org-agenda-goto-calendar)))
    )
  (let ((timer (timer-create)))
    (timer-set-function timer 'jump-to-org-agenda)
    (timer-set-idle-time timer 300 t)
    (timer-activate-when-idle timer nil))
  ;;(run-with-idle-timer 300 t 'jump-to-org-agenda)

** Export
*** Dark backgrounds for code blocks

;; (setq org-export-html-style
;;       "<style type=\"text/css\">
;; <!--/*--><![CDATA[/*><!--*/
;; pre.src { color: #f6f3e8 !important; background-color: #242424 !important; }
;; /*]]>*/-->
;; </style>")

* ERC
Using bouncer.
#+begin_src emacs-lisp
    (load-file (expand-file-name "~/.emacs.d/secrets.el"))
    (defun my-erc ()
      (interactive)
      (erc
        :server "localhost"
        :port "6667"
        :nick my-erc-name
        :password my-erc-password))
#+end_src

* Evil
#+begin_src emacs-lisp
  (ensure-pkgs '(evil))
#+end_src
* Custom File
#+begin_src emacs-lisp
(setq custom-file (expand-file-name "~/.emacs.d/custom.el"))
(load custom-file)
#+end_src
